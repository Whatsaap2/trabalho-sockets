import socket
import os
from schemdraw.parsing import logicparse
import struct

def convert_base(value, from_base, to_base):
    """
    Converte um valor de uma base numérica para outra.

    Args:
    - value (str): O valor a ser convertido.
    - from_base (int): A base de origem do valor (2, 10, 16).
    - to_base (int): A base de destino para a conversão (2, 10, 16).

    Returns:
    - str: O valor convertido na base de destino.
    """
    try:
        if from_base == 10:
            value = int(value)
        elif from_base == 16:
            value = int(value, 16)
        elif from_base == 2:
            value = int(value, 2)
        return format(value, {2: 'b', 10: 'd', 16: 'x'}[to_base])
    except ValueError:
        return "Error: Valor inválido"

def add_subtract_complement2(a, b, operation):
    """
    Realiza adição ou subtração de números em complemento de dois (8 bits).

    Args:
    - a (str): O primeiro número binário de 8 bits.
    - b (str): O segundo número binário de 8 bits.
    - operation (str): A operação a ser realizada ('add' para adição, 'subtract' para subtração).

    Returns:
    - tuple: Uma tupla contendo o resultado da operação em binário de 8 bits e um indicador de overflow.
    """
    try:
        a = int(a, 2)
        b = int(b, 2)
        if operation == 'add':
            result = a + b
        elif operation == 'subtract':
            result = a - b
        overflow = result > 127 or result < -128
        result = result & 0xFF
        return format(result if result < 128 else result - 256, '08b'), overflow
    except ValueError:
        return "Error: Valor inválido"

def divide_complement2(a, b):
    """
    Realiza a divisão de números em complemento de dois (8 bits).

    Args:
    - a (str): O dividendo em formato binário de 8 bits.
    - b (str): O divisor em formato binário de 8 bits.

    Returns:
    - str: O resultado da divisão em formato binário de 8 bits.
    """
    try:
        a = int(a, 2)
        b = int(b, 2)
        if b == 0:
            return "Error: Divisão por zero", False
        result = a // b
        return format(result if result < 128 else result - 256, '08b')
    except ValueError:
        return "Error: Valor inválido"

def ieee_754(value):
    """
    Converte um valor de ponto flutuante para o formato IEEE 754 precisão simples.

    Args:
    - value (str): O valor em ponto flutuante a ser convertido.

    Returns:
    - tuple: Uma tupla contendo a representação binária dos bits e a representação hexadecimal do valor.
    """
    try:
        float_value = float(value)
        packed = struct.pack('!f', float_value)
        bits = ''.join(f'{byte:08b}' for byte in packed)
        hex_value = ''.join(f'{byte:02x}' for byte in packed)
        return bits, hex_value
    except ValueError:
        return "Error: Valor inválido"

def to_hex_string(value):
    """
    Converte uma string para a representação hexadecimal e seus pontos de código Unicode.

    Args:
    - value (str): A string a ser convertida.

    Returns:
    - tuple: Uma tupla contendo a representação hexadecimal da string e seus pontos de código Unicode.
    """
    try:
        hex_string = value.encode('utf-8').hex()
        code_points = [format(ord(char), 'x') for char in value]
        return hex_string, code_points
    except ValueError:
        return "Error: Valor inválido"

def draw_logic_circuit(circuit_desc):
    """
    Desenha um circuito lógico baseado na descrição fornecida e salva como um arquivo SVG.

    Args:
    - circuit_desc (str): A descrição do circuito lógico.

    Returns:
    - str: O caminho para o arquivo SVG salvo ou uma mensagem de erro em caso de falha.
    """
    try:
        if os.name == 'nt':  # Windows
            downloads_directory = os.path.join(os.environ['USERPROFILE'], 'Downloads')
        else:  # macOS e Linux
            downloads_directory = os.path.join(os.environ['HOME'], 'Downloads')
        output_path = os.path.join(downloads_directory, "output_circuit.svg")
        os.makedirs(downloads_directory, exist_ok=True)

        circuit = logicparse(circuit_desc, gateH=1.5)
        d = circuit
        d.save(output_path)
        return output_path
    except Exception as e:
        return f"Error: {e}"

def handle_client(conn):
    """
    Lida com a conexão do cliente, recebendo e processando dados para as diferentes operações.

    Args:
    - conn (socket): O objeto de conexão do cliente.
    """
    while True:
        data = conn.recv(1024).decode()
        if not data:
            break
        params = data.split(',')
        question = params[0].strip()
        response = ""
        
        if question not in ['1', '2', '3', '4', '5', '6']:
            response = "Error: Questão inválida"
        else:
            try:
                if question == '1':
                    value, from_base, to_base = params[1], int(params[2]), int(params[3])
                    response = convert_base(value, from_base, to_base)
                
                elif question == '2':
                    a, b, operation = params[1], params[2], params[3]
                    result, overflow = add_subtract_complement2(a, b, operation)
                    response = f"Result: {result}, Overflow: {overflow}"
                
                elif question == '3':
                    a, b = params[1], params[2]
                    response = divide_complement2(a, b)
                
                elif question == '4':
                    value = params[1]
                    bits, hex_value = ieee_754(value)
                    response = f"Bits: {bits}, Hex: {hex_value}"
                
                elif question == '5':
                    value = params[1]
                    hex_string, code_points = to_hex_string(value)
                    response = f"Hex: {hex_string}, Code Points: {', '.join(code_points)}"
                
                elif question == '6':
                    circuit_desc = ','.join(params[1:])
                    output_path = draw_logic_circuit(circuit_desc)
                    if output_path and not output_path.startswith("Error"):
                        with open(output_path, 'rb') as f:
                            img_data = f.read()
                            conn.sendall(img_data)
                        print(f"Sent image data to client from: {output_path}")
                    else:
                        conn.sendall(b"Error generating circuit image")
                        print("Error generating circuit image")
                    continue
            
            except IndexError:
                response = "Error: Número de argumentos incorreto"
            except ValueError:
                response = "Error: Valor inválido"
            except Exception as e:
                response = f"Error: {e}"
        
        conn.send(response.encode())
    conn.close()

def start_server():
    """
    Inicia o servidor, aguardando conexões de clientes na porta 65432.
    """
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('localhost', 65432))
    server_socket.listen(1)
    print("Server started and listening on port 65432")
    
    while True:
        conn, addr = server_socket.accept()
        print(f"Connected by {addr}")
        handle_client(conn)

if __name__ == "__main__":
    start_server()
